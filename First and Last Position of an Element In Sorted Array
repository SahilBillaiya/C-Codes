int firstoccurance(vector<int>& arr,int size,int key){
    int s=0,e=size - 1;
    int mid = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[mid]==key){
            ans = mid;
            e = mid - 1;
    }
    else if(arr[mid]<key){
        s= mid + 1;
    }
     else if (arr[mid]>key){
         e= mid -1;
     }
     mid = s+(e-s)/2;
}
    return ans;
}

int lastoccurance(vector<int>& arr,int size,int key){
    int s=0,e=size - 1;
    int mid = s+(e-s)/2;
    int ans = -1;
    while(s<=e){
        if(arr[mid]==key){
            ans = mid;
            s = mid + 1;
    }
    else if(arr[mid]<key){
        s= mid + 1;
    }
     else if (arr[mid]>key){
         e= mid -1;
     }
     mid = s+(e-s)/2;
}
    return ans;
}
pair<int, int> firstAndLastPosition(vector<int>& arr, int s, int k)
{
pair <int , int> p;
    p.first= firstoccurance(arr,s,k);
    p.second= lastoccurance(arr,s,k);
    return p;
}
